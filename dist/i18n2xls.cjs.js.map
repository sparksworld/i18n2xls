{"version":3,"file":"i18n2xls.cjs.js","sources":["../src/index.ts"],"sourcesContent":["// import path from 'path'\nconst fs = require('fs')\nconst path = require('path')\nconst json2xls = require('json2xls')\nconst commandPath = path.resolve(process.cwd(), './example')\n\nconst readDir = () => {\n  let dirs: any[] = []\n  const files = fs.readdirSync(commandPath)\n\n  files.forEach(function (item: string, index: number) {\n    const path = commandPath + '/' + item\n    let stat = fs.lstatSync(path)\n    if (stat.isDirectory() === true) {\n      dirs.push({\n        name: item,\n        path: path,\n        data: require(`${path}/resources.json`)\n      })\n    }\n  })\n\n  return dirs\n}\n\nconst getKey2Word = (dirs: any[], key: string) => {\n  const obj: any = {}\n  dirs.forEach(item => {\n    const data = item.data\n    const name = item.name\n    const value = data[key] || ''\n    obj[name] = value\n  });\n\n  return obj\n}\n\n\nconst readFils = () => {\n  const arr = []\n  const languageWords = readDir()?.[0]?.data || {}\n  for (var key in languageWords) {\n    arr.push({\n      key: key,\n      ...getKey2Word(readDir(), key)\n    })\n  }\n  return arr\n}\n\n\n\n\nconst main = () => {\n  const data = readFils()\n  var xls = json2xls(data);\n  fs.writeFileSync('i18n2xls.xlsx', xls, 'binary');\n}\n\n\nmain()"],"names":["fs","require","path","json2xls","commandPath","resolve","process","cwd","readDir","dirs","files","readdirSync","forEach","item","index","stat","lstatSync","isDirectory","push","name","data","getKey2Word","key","obj","value","readFils","arr","languageWords","_b","_a","Object","assign","main","xls","writeFileSync"],"mappings":"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"}